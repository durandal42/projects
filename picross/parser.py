from picross import solve_grid


def parse(runs_str):
  runs_strs = runs_str.split(",")
  runs = []
  for runs_str in runs_strs:
    # print(runs_str)
    run = [int(run_str) for run_str in runs_str.strip().split(" ")]
    runs.append(run)
  # print(runs)
  return runs

assert (parse("2, 2 1, 2 1, 1 1 1, 1 1 1, 1 1 1, 10, 2 2, 9, 3 1") ==
        [[2], [2, 1], [2, 1], [1, 1, 1], [1, 1, 1],
         [1, 1, 1], [10], [2, 2], [9], [3, 1]])


def unparse(runs):
  return ", ".join(" ".join(str(x) for x in run) for run in runs)

for run_str in [
    "2, 2 1, 2 1, 1 1 1, 1 1 1, 1 1 1, 10, 2 2, 9, 3 1",
    "2 1, 4, 1 2, 3 1, 2 1 1, 2 1 1, 2 4 1, 1 3, 2 3, 4 2",
    "10, 1 1 1, 1 1 1, 1 1 3, 3 1, 2 1, 1 1 1, 1 1, 2 3 2, 2 1",
    "1, 1 1, 1 1 1, 6, 1 6, 1 2 2, 3 1, 1 5 1, 1 1 1, 4 1"
    "3 1, 5 2 1 3 1, 5 2 4 9, 4 4 12, 2 4 5 9, 1 4 3 1 3 1, 1 5 1, 7, 3 7, 5 7, 5 6 1, 2 8, 1 7, 4, 3",
    "5 4, 4 4, 3 3, 4 1 3, 3 4 2, 2 6, 7, 3 7 1, 2 9, 8, 1 7, 1 2 6, 2 2 4, 5 2, 3 2, 1, 3, 5, 3, 3, 5, 5, 5, 3, 7"
    "1 1 2, 2 2 3, 1 2 4, 2 2 2, 2 2 4 2 2, 18 3, 2 1 5 3, 3 2 3 4 3 1, 6 4 6 8, 4 3 3 3 3, 3 3 1 3 1, 2 4 1 2 3 1, 1 2 2 1 1 2 3, 1 5 1 2 2, 3 2 2 1 1 3, 6 4 2 1 1 3, 6 2 2 2 8 3, 4 5 1 2 4, 1 2 1 2 1 6 2, 2 1 3 3 5 1 3, 2 3 1 1 4 6 1, 4 3 4 3 6, 4 1 2 12 1, 3 2 2, 3 5, 3 5, 2 1 3, 1 2 2, 1 1, 1 1",
    "1 2 2, 2 2 2, 2 3 2, 2 4 4, 4 4 4, 2 10 5, 3 3 5 3, 3 2 6 1 4, 4 11 4, 1 1 2 1 1 2 1 4, 5 11 4 6, 6 3 4 4 7, 6 1 3 1, 2 1 3 1, 2 1 3 1, 2 5 5, 2 3 1 2, 1 7 7, 2 2 3 2 3, 2 2 1 2 1, 2 2 1 4, 2 1 1 2 2, 2 3 3 5, 2 2 1 3 1, 5 1 2 1 3, 2 2 2 5, 2 2 8 2, 2 1 2 6 3, 3 2 2 6 1, 3 2 3 1 5"
    "2 12 1 1 2, 2 8 2 1, 1 1 4 2, 2 4 4 4 1, 2 13 7, 5 11 6, 5 9 8, 4 2 4 2 2, 4 3 4 3 8, 3 4 8 6, 2 6 12 1 1, 1 1 1 4 1 4 1, 4 1 1 1 2, 3 1 2, 1 1 3 3, 1 2 2 2 4, 1 1 3 2 6, 1 1 3 3, 1 1 1 1 2 2 7, 6 4 4 4, 5 1 15, 5 1 7 1 2, 4 2 6, 4 3 5 1, 2 1 4 4 1, 1 10 4, 7 6, 1 1 10 2 2, 7 1 3 5 2, 9 3 2",
    "2 5 3 1 7 2, 2 6 2 6 3, 14 6 2, 8 1 5 3, 1 2 1 5 2, 3 1 1 1 2, 2 2 3 2 2, 2 8 1, 2 10 2, 2 4 2 1, 2 4 2 4, 1 3 3 1 3 3, 1 6 3 3, 1 7 3 5, 12 5 5, 12 3 3 5, 1 4 3 4 5, 3 5 4 1 3, 3 12, 1 7 10 1, 3 1 2 8, 1 4 3 2 8, 9 1 1 1 3, 8 1 1 1 4, 4 4 4 1 2 2, 3 2 4 1 1 1, 1 3 3 3 3 2, 1 1 6 1, 2 3 3 5 1 1 1, 1 3 1 1 3 1"
]:
  assert unparse(parse(run_str)) == run_str


# solve_grid(parse("2, 2 1, 2 1, 1 1 1, 1 1 1, 1 1 1, 10, 2 2, 9, 3 1"),
#            parse("2 1, 4, 1 2, 3 1, 2 1 1, 2 1 1, 2 4 1, 1 3, 2 3, 4 2"))


def parse_and_solve(col_runs_str, row_runs_str):
  solve_grid(parse(col_runs_str), parse(row_runs_str))

# parse_and_solve(
#     "10, 1 1 1, 1 1 1, 1 1 3, 3 1, 2 1, 1 1 1, 1 1, 2 3 2, 2 1",
#     "1, 1 1, 1 1 1, 6, 1 6, 1 2 2, 3 1, 1 5 1, 1 1 1, 4 1"
# )

# parse_and_solve(
#     "3 1, 5 2 1 3 1, 5 2 4 9, 4 4 12, 2 4 5 9, 1 4 3 1 3 1, 1 5 1, 7, 3 7, 5 7, 5 6 1, 2 8, 1 7, 4, 3",
#     "5 4, 4 4, 3 3, 4 1 3, 3 4 2, 2 6, 7, 3 7 1, 2 9, 8, 1 7, 1 2 6, 2 2 4, 5 2, 3 2, 1, 3, 5, 3, 3, 5, 5, 5, 3, 7"
# )


# smallest 9+ difficulty b&w puzzle from https://www.nonograms.org/nonograms
# parse_and_solve(
#     "1 1 2, 2 2 3, 1 2 4, 2 2 2, 2 2 4 2 2, 18 3, 2 1 5 3, 3 2 3 4 3 1, 6 4 6 8, 4 3 3 3 3, 3 3 1 3 1, 2 4 1 2 3 1, 1 2 2 1 1 2 3, 1 5 1 2 2, 3 2 2 1 1 3, 6 4 2 1 1 3, 6 2 2 2 8 3, 4 5 1 2 4, 1 2 1 2 1 6 2, 2 1 3 3 5 1 3, 2 3 1 1 4 6 1, 4 3 4 3 6, 4 1 2 12 1, 3 2 2, 3 5, 3 5, 2 1 3, 1 2 2, 1 1, 1 1",
#     "1 2 2, 2 2 2, 2 3 2, 2 4 4, 4 4 4, 2 10 5, 3 3 5 3, 3 2 6 1 4, 4 11 4, 1 1 2 1 1 2 1 4, 5 11 4 6, 6 3 4 4 7, 6 1 3 1, 2 1 3 1, 2 1 3 1, 2 5 5, 2 3 1 2, 1 7 7, 2 2 3 2 3, 2 2 1 2 1, 2 2 1 4, 2 1 1 2 2, 2 3 3 5, 2 2 1 3 1, 5 1 2 1 3, 2 2 2 5, 2 2 8 2, 2 1 2 6 3, 3 2 2 6 1, 3 2 3 1 5"
# )


# https://www.puzzle-nonograms.com/?size=5 (March 18 2024)
# from Ari
# parse_and_solve(
#     "2 12 1 1 2, 2 8 2 1, 1 1 4 2, 2 4 4 4 1, 2 13 7, 5 11 6, 5 9 8, 4 2 4 2 2, 4 3 4 3 8, 3 4 8 6, 2 6 12 1 1, 1 1 1 4 1 4 1, 4 1 1 1 2, 3 1 2, 1 1 3 3, 1 2 2 2 4, 1 1 3 2 6, 1 1 3 3, 1 1 1 1 2 2 7, 6 4 4 4, 5 1 15, 5 1 7 1 2, 4 2 6, 4 3 5 1, 2 1 4 4 1, 1 10 4, 7 6, 1 1 10 2 2, 7 1 3 5 2, 9 3 2",
#     "2 5 3 1 7 2, 2 6 2 6 3, 14 6 2, 8 1 5 3, 1 2 1 5 2, 3 1 1 1 2, 2 2 3 2 2, 2 8 1, 2 10 2, 2 4 2 1, 2 4 2 4, 1 3 3 1 3 3, 1 6 3 3, 1 7 3 5, 12 5 5, 12 3 3 5, 1 4 3 4 5, 3 5 4 1 3, 3 12, 1 7 10 1, 3 1 2 8, 1 4 3 2 8, 9 1 1 1 3, 8 1 1 1 4, 4 4 4 1 2 2, 3 2 4 1 1 1, 1 3 3 3 3 2, 1 1 6 1, 2 3 3 5 1 1 1, 1 3 1 1 3 1"
# )
